package com.trhui.log;

/**
 * 自定义正则表达式模式
 *
 * @author: xiaogc
 * @date: 2024/9/13 16:36
 */
public enum CustomRegexPattern {
    /**
     * 定义大陆身份证号的匹配模式
     * 解析：
     * (?<!\\w)：确保身份证号前面没有其他字符或数字。
     * \\d{6}：匹配身份证号的前 6 位（地址码）。
     * (19\\d{2}|20\\d{2})：匹配出生年份，允许 1900 年至 2099 年之间的年份。
     * (0[1-9]|1[0-2])：匹配出生月份，范围为 01 到 12。
     * (0[1-9]|[12]\\d|3[01])：匹配出生日期，范围为 01 到 31，并且确保日期格式合法。
     * \\d{3}[0-9Xx]：匹配身份证号的最后 4 位（顺序码和校验位）。
     * (?!\\w)：确保身份证号后面没有其他字符或数字。
     * $1**********$5：保留身份证号的前 6 位和最后 4 位，中间 10 位（出生日期 + 部分顺序码）用 ********** 替换。
     * 示例：
     * 身份证号 110101199001011234 会被替换为：110101**********1234
     */
    PATTERN_IDENT_NO("PATTERN_IDENT_NO", "(?<!\\w)(\\d{6})(19\\d{2}|20\\d{2})(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])(\\d{2})(\\d{1}[0-9Xx])(?!\\w)", "$1**********$6", 1),

    /**
     * 定义银行卡号的匹配模式，特定于某些银行的卡号规则
     * 解析：
     * (?<!\\w)：确保银行卡号前面没有其他字符或数字，使正则只匹配独立的银行卡号。
     * 62\\d{4}：确保卡号以 62 开头，并匹配前 6 位。
     * \\d{6,9}：匹配中间的 6 到 9 位（根据卡号的总长度而定），这部分将被 ****** 替换。
     * \\d{4}：匹配银行卡号的最后 4 位，保留显示。
     * (?!\\w)：确保银行卡号后面没有其他字符或数字。
     * $1******$2：将匹配到的银行卡号前 6 位和最后 4 位保留，中间部分用 ****** 进行替换。
     * 示例：
     * 19位银行卡号 6234567890123456789 会被替换为：623456********5678
     */
    PATTERN_CARD_NO("PATTERN_CARD_NO", "(?<!\\w)(62\\d{4})\\d{6,9}(\\d{4})(?!\\w)", "$1******$2", 2),


    /**
     * 定义电话号码的匹配模式，包括中国大陆、香港、台湾的电话格式
     * 解析：
     * (?<!\\w)：确保号码前面没有其他字符。
     * (1\\d{2})\\d{4}(\\d{4})：匹配中国大陆的11位手机号，前3位、后4位保留，中间4位替换为****。
     * 1\\d{2}：匹配大陆的前3位。
     * \\d{4}：匹配中间4位，将替换为****。
     * \\d{4}：匹配后4位，保留。
     * (\\d{4})\\d{3}(\\d{3})：匹配香港的8位手机号，前4位、后3位保留，中间3位替换为****。
     * (09\\d{2})\\d{4}(\\d{2})：匹配台湾的10位手机号，前4位、后2位保留，中间4位替换为****。
     * (?!\\w)：确保号码后面没有其他字符。
     * $1$3$5****$2$4$6：根据匹配的号码格式，使用正确的掩码规则，保留各地号码的前后部分，中间部分用****进行替换。
     * 示例：
     * 大陆手机号 13658596589 会被替换为：136****6589
     * 香港手机号 91234567 会被替换为：912****567
     * 台湾手机号 0912345678 会被替换为：0912****78
     */
    PATTERN_PHONE("PATTERN_PHONE", "(?<!\\w)(1\\d{2})\\d{4}(\\d{4})(?!\\w)|(?<!\\w)(\\d{4})\\d{3}(\\d{3})(?!\\w)|(?<!\\w)(09\\d{2})\\d{4}(\\d{2})(?!\\w)", "$1$3$5****$2$4$6", 3),
    // 定义中文姓名的匹配模式，考虑了姓名的长度和汉字范围
//    PATTERN_CHINESE_NAME("PATTERN_CHINESE_NAME", "(?<![一-龥])([一-龥]{2,4})(?![一-龥])", "$1***", 4),
    // 定义香港身份证号的匹配模式
    PATTERN_IDENT_NO_HK("PATTERN_IDENT_NO_HK", "(?<!\\w)([A-Za-z]{1}\\d{6}\\([0-9A]\\))(?!\\w)", "$1****$2", 5),
    // 定义台湾身份证号的匹配模式
    PATTERN_IDENT_NO_TW("PATTERN_IDENT_NO_TW", "(?<!\\w)([A-Za-z]{1}\\d{9})(?!\\w)", "$1****$2", 6),
    // 定义邮箱地址的匹配模式
    PATTERN_MAIL("PATTERN_MAIL", "(?<!\\w)([a-zA-Z0-9_\\-\\.]{1,64})@[a-zA-Z0-9-]+(\\.[a-zA-Z]{2,6}){1,2}(?!\\w)", "$1****@$2", 7);
    // 定义地址名称的匹配模式，用于识别地址中的省、市、县或自治区
//    PATTERN_ADDRESS_NAME("PATTERN_ADDRESS_NAME", "(?<![一-龥])([一-龥]{2,3}省|[一-龥]{2,3}市|[一-龥]{2,3}县|[一-龥]{2,3}区|[一-龥]{2,5}自治区)(?![一-龥])", "$1***");

    private String name;
    private String pattern;
    private String replacement;
    private int priority;

    CustomRegexPattern(String name, String pattern, String replacement, int priority) {
        this.name = name;
        this.pattern = pattern;
        this.replacement = replacement;
        this.priority = priority;
    }

    public String getName() {
        return this.name;
    }

    public String getPattern() {
        return this.pattern;
    }


    public String getReplacement() {
        return replacement;
    }

    public int getPriority() {
        return priority;
    }
}
